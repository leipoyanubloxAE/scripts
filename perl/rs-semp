#!/usr/bin/perl
#
# Script: rs-semp
#
# This script will make a SEMP request to the router and then print out the
# response
# 
#
# The framework of the script was autogenerated by version 7505 of
# /opt/soldev/devtools/bin/super-script.
#
#############################################################################


use strict;
use warnings;
use Data::Dumper;
use Getopt::Long;
use Pod::Usage;

use constant BOLD    => "\e[1m";
use constant NORMAL  => "\e[0m";
my $BOLD   = BOLD;
my $NORMAL = NORMAL;
my $BOLDr  = "\e[31m\e[1m";  # Red
my $BOLDg  = "\e[32m\e[1m";  # Green


# Main hash - all the argument values will be in here after parsing
my %args = (
            router => undef,
            show_request => '0',
            username => 'admin',
            password => 'admin',
            port => '80',
            semp => [''],
            version => '',
            debug => undef,
            gen_completion => undef,
            help => undef,
            interactive => undef,
            quiet => undef,
            short_help => undef,
            tiny_help => undef,
            verbose => undef,
);

# Arrays to hold the parsed and unparsed args
my @remainingArgs;
my @allArgs;
my @parsedArgs;
my %parsedArgs;

ParseArgs();

##--User Code Start--##

use FindBin;
use lib "$FindBin::Bin";
use lib "$FindBin::Bin/../lib/perl";
use lib "$FindBin::Bin/lib/perl";


my $module = "Solace/Semp.pm";
if ($args{version}) {
  $module = GetSempModule() || $module;
}

eval("require '$module'; '$module'->import();");

# Call main - the start of the script
Main();


##############################################################################
## Main - Starting point for the script
##
##############################################################################
sub Main {

  $args{version} =~ s/\./_/g;

  # vmr hack: version in schema and directory structure in RND load for VMR
  # is different
  if ($args{version} =~ m/(.*)vmr/) {
    $args{version} = "7_2VMR";
  }

  if ($args{router} =~ /:\d+$/) {
    my ($name, $port) = ($args{router} =~ /([^:]+):(.*)/);
    if ($name) {
      $args{router} = $name;
      $args{port}   = $port;
    }
  }
  

  my $semp = Solace::Semp->new(debug => $args{debug},
                               version => $args{version},
                               port => $args{port},
                               hostname => $args{router},
                               username => $args{username},
                               password => $args{password},
                               indent => $args{indent});

  my $doShell =  (!defined($args{semp}[0]) || $args{semp}[0] eq "");


  do {
    my $cli;
    if (!defined($args{semp}[0]) || $args{semp}[0] eq "") {
      print "${BOLD}Please enter a CLI command:${NORMAL} ";
      $cli = <STDIN>;
      chomp($cli);
      exit if $cli =~ /^\s*exit|quit\s*$/i;
    }
    elsif (scalar(@{$args{semp}}) == 1 &&
           (-r $args{semp}[0])) {
      my $xml;
      open(IN, "<", $args{semp}[0]) || Fatal("Failed to open file $args{semp}[0]: $!");
      while (my $line = <IN>) {
        $xml .= $line;
      }

      if ($args{show_request}) {
        print "Request: \n\n$xml\n\nResponse:\n\n";
      }
      
      my $resp = $semp->send(xml => $xml,
                             responseType => "xml");
      print "$resp->{xml}\n";
      exit 0;

    }
    else {
      $cli = join(" ", @{$args{semp}});
    }
    
    if ($args{show_request}) {
      my $xml = $semp->cliToSemp(cli => $cli);
      print "Request: \n\n$xml\n\nResponse:\n\n";
    }

    my $resp;
    eval {
      $resp = $semp->send(cli => $cli,
                          responseType => "xml");
    };

    if ($@) {
      print "$@\n";
    }
    else {
      if (ref($resp)) {
        if ($resp->{xml} =~ /^\s*$/) {
          print "No response received. Note that if you are connecting to a VMR, you probably need ':8080' after your router name\n";
        }
        print $resp->{xml} . "\n";
      }
      else {
        if ($resp =~ /^\s*$/) {
          print "No response received. Note that if you are connecting to a VMR, you probably need ':8080' after your router name\n";
        }
        print $resp . "\n";
      }
    }
  } while ($doShell);


}


##############################################################################
## GetSempModule - Extract the Semp module for the specified version 
##
##############################################################################
sub GetSempModule {

  my $ver = $args{version};
  my $dir = "/home/public/RND/loads/solcbr/current_$ver";
  
  if (!-d $dir) {
    # Try the new scheme
    $dir = "/home/public/RND/loads/solcbr/$ver/current";

    if (!-d $dir) {
      Error("Can't find load directory: $dir");
      return undef;
    }
  }

  my @tarball = glob("$dir/cli-to-semp/*.tgz");
  my $tarball = $tarball[0];

  if (!$tarball) {
    Error("Failed to find cli-to-semp tarball in $dir/cli-to-semp");
    return undef;
  }

  # Try to extract the semp version used in the .xsd file - this is
  # probably very different from the directory's name
  if (-r "$dir/semp-rpc-soltr.xsd") {
    my $verLine = `grep semp-version $dir/semp-rpc-soltr.xsd`;
    if ($verLine) {
      my ($ver) = ($verLine =~ /fixed="soltr\/([^"]+)"/);
      $args{version} = $ver if $ver;
    }
  }
  elsif (-r "$dir/vm_schema/semp-rpc-soltr.xsd") {
    my $verLine = `grep semp-version $dir/vm_schema/semp-rpc-soltr.xsd`;
    if ($verLine) {
      my ($ver) = ($verLine =~ /fixed="soltr\/([^"]+)"/);
      $args{version} = $ver if $ver;
    }
  }
  elsif (-r "$dir/lm_schema/semp-rpc-soltr.xsd") {
    my $verLine = `grep semp-version $dir/lm_schema/semp-rpc-soltr.xsd`;
    if ($verLine) {
      my ($ver) = ($verLine =~ /fixed="soltr\/([^"]+)"/);
      $args{version} = $ver if $ver;
    }
  }
  
  my ($name, $fullVersion) = ($tarball =~ /(cli-to-semp-(.*?))\.tgz/);

  if (!$fullVersion) {
    Error("cli-to-semp tarball has unexpected name format: $tarball");
    return undef;
  }

  if (-d "/tmp/$name") {
    if (-r "/tmp/$name/Semp.pm") {
      return "/tmp/$name/Semp.pm"
    }
    else {
      Error("cli-to-semp directory (/tmp/$name) exists, but Semp.pm is missing");
      return undef;
    }
  }
  else {
    `cp $tarball /tmp`;
    chdir("/tmp");
    `tar zxf $name.tgz`;
    return "/tmp/$name/Semp.pm";
  }

} # GetSempModule #



##--User Code End--##


##############################################################################
## ParseArgs - Parse the command line arguments
##
##############################################################################
sub ParseArgs {
  
  # Options Parsing
  @allArgs = @ARGV;

  my %defaultArgs = %args;
  %args = ();

  # Converts position arguments to names
  my @posToName = (
              'router',
              'semp',
  );

  # Converts position arguments to names
  my @posToType = (
              'string',
              'string',
  );

  # All required arguments
  my %requiredArgs = (
           'router' => 1,
  );

  # All hides-required arguments
  my %hidesRequiredArgs = (
  );

  # All enum arguments
  my %enumArgs = (
  );

  # Cross ref of perl version of args to command line version
  my %perlToCmdArg = (
                       'router' => 'router',
                       'show_request' => 'show-request',
                       'username' => 'username',
                       'password' => 'password',
                       'port' => 'port',
                       'semp' => 'semp',
                       'version' => 'version',
                       'debug' => 'debug',
                       'gen_completion' => 'gen-completion',
                       'help' => 'help',
                       'interactive' => 'interactive',
                       'quiet' => 'quiet',
                       'short_help' => 'short-help',
                       'tiny_help' => 'tiny-help',
                       'verbose' => 'verbose',
  );


  LearnArgsFromConfFile();

  my $result = GetOptions (
                           'show-request' => \$args{show_request},
                           'username=s' => \$args{username},
                           'password=s' => \$args{password},
                           'port=o' => \$args{port},
                           'version=s' => \$args{version},
                           'debug' => \$args{debug},
                           'gen-completion' => \$args{gen_completion},
                           'help' => \$args{help},
                           'interactive' => \$args{interactive},
                           'quiet' => \$args{quiet},
                           'short-help' => \$args{short_help},
                           'tiny-help' => \$args{tiny_help},
                           'verbose' => \$args{verbose},
  );

  if (!$result) { exit 1; }

  # Positional argument processing

  my $posIdx = 0;
  while (@ARGV) {
    last if $posIdx >= 2;
    if ($posIdx == 1) {
      $args{$posToName[$posIdx]} = [];
      @{$args{$posToName[$posIdx]}} = @ARGV;
      @ARGV = ();
      if ($posToType[$posIdx] eq 'integer') {
        map {$_ = StrToNum($_, "Invalid argument, failed to convert $_ to number");}
          @{$args{$posToName[$posIdx]}};
      }
      last;
    }  
    $args{$posToName[$posIdx]} = shift @ARGV;
    if ($posToType[$posIdx] eq 'integer') {
      $args{$posToName[$posIdx]} = 
         StrToNum($args{$posToName[$posIdx]}, "Invalid argument, failed to convert $args{$posToName[$posIdx]} to number");
    }
    delete $requiredArgs{$posToName[$posIdx]};
    $posIdx++;
  }

  @remainingArgs = @ARGV;
  @parsedArgs = @allArgs[0..(scalar(@allArgs)-scalar(@remainingArgs)-1)];

  Fatal("${BOLDr}Unrecognized argument(s):$NORMAL " . join(' ', @ARGV)) if $#ARGV > -1;

  foreach my $arg (keys(%args)) {
    $parsedArgs{$arg} = 1 if defined $args{$arg};
  }

  foreach my $arg (keys(%defaultArgs)) {
    $args{$arg} = $defaultArgs{$arg} if !defined $args{$arg};
  }

  # Standard option processing

  if ($args{gen_completion}) {
    print "--show-request --username --password --port --version --debug --help --interactive --quiet --short-help --tiny-help --verbose ";
    exit 1;
  }

  if ($args{help}) {
    
    pod2usage(-verbose => 2);    
    exit 1;
  }
  if ($args{short_help}) {
    
    pod2usage(-verbose => 1);
    exit 1;
  }
  if ($args{tiny_help}) {
    my $info = GetArgInfo();
    print "$info->{Name} - $info->{ShortDescription}\n";
    exit 1;
  }

  my $showCmdLine = 0;
  if ($args{interactive}) {
    PromptForArgs(1, %args);
    $showCmdLine = 1;
  }

  my $hidesRequired = 0;
  foreach my $key (keys(%hidesRequiredArgs)) {
    if (defined $args{$key}) {
      $hidesRequired = 1;
      last;
    }
  }
  
  # Check for missing required params
  if (!$hidesRequired) {
    foreach my $key (keys(%requiredArgs)) {
      if (defined $args{$key}) {
        delete $requiredArgs{$key};
      }
    }
    if (scalar(keys(%requiredArgs)) > 0) {
      print "\nMissing some required parameters\n";
      PromptForArgs(1, %requiredArgs);
      $showCmdLine = 1;
    }
  }
  
  # Check that enums have valid values
  my $argInfo = GetArgInfo();
  foreach my $arg (keys(%enumArgs)) {
    if (defined $args{$arg}) {
      my $argList = ref($args{$arg}) ? $args{$arg} : [$args{$arg}];
      foreach my $val (@{$argList}) {
        if (not defined $enumArgs{$arg}{$val}) {
          print "\nInvalid value '$val' for argument $arg.  Valid values are:\n";
          foreach my $value (keys(%{$enumArgs{$arg}})) {
            print "  $value\n";
          }
          exit 1;
        }
      }
    }
  }
  
  if ($showCmdLine) {
    # Output the command line for this
    DisplayCommandLine();
  }

} # ParseArgs #

##############################################################################
## PromptForArgs - Will ask the user for values for various arguments
##
## skipAutoArgs: When true, it will not prompt for --interactive, --debug,
##               --quiet, --verbose or --help
##
##############################################################################
sub PromptForArgs {
  my ($skipAutoArgs, %argsForPrompting) = @_;
  my $argInfo = GetArgInfo();
  
  print "\nInteractive Input:\n\n";
  foreach my $arg (@{$argInfo->{Args}}) {
    my $name = $arg->{Name};
    my $perlName = $arg->{PerlName};
    if (not exists $argsForPrompting{$perlName}) {
      next;
    }
    if ($skipAutoArgs && 
        ($name =~ /^(debug|interactive|quiet|verbose|help|gen-completion)$/)) {
      next;
    }
    my $desc = $arg->{Description};
    my $space = " " x (length($name) + 3);
    $desc =~ s/(.{1,75 - length($name)})(?:\s|$|\n)/$1\n$space/g;
    my $prompt = "\n$BOLD$name$NORMAL - $arg->{Description}";
    my $default = '';
    my $defVal = '';
    if (defined $args{$perlName}) {
      $default = " [$args{$perlName}]";
      $defVal = $args{$perlName};
    }
    elsif ($arg->{Default}) {
      $default = " [$arg->{Default}]";
      $defVal = $arg->{Default};
    }
    while (1) {
      if ($arg->{ValType} eq 'boolean') {
        print $prompt . "\nEnter value for flag (undef, 0 or 1)$default: ";
      }
      elsif ($arg->{ValType} =~ /integer|float/) {
        print $prompt . "\nEnter numeric value$default: ";
      }
      elsif ($arg->{ValType} eq 'enum') {
        print $prompt . "\nSelect value: ";
      }
      else {
        print $prompt . "\nEnter value$default: ";
      }
      my $response;
      if ($arg->{ValType} eq 'enum') {
        print "\n";
        $default = '';
        my $num = 1;
        my $defaultNum;
        foreach my $val (@{$arg->{EnumList}}) {
          print "  $num: $val\n";
          if ($val eq $defVal) {
            $default = "[$num]";
            $defaultNum = $num;
          }
          $num++;
        }
        while (1) {
          print "Select number$default: "; 
          chomp($response = <STDIN>);
          if ($response eq '') {
            $response = defined $defaultNum ? $defaultNum : 0;
          }
          if ($response >= 1 &&
              $response <= scalar(@{$arg->{EnumList}})) {
            $response = $arg->{EnumList}[$response-1];
            last;
          }
          print "Invalid selection - try again\n";
        }
      }
      else {
        chomp($response = <STDIN>);
      }
      if ($arg->{Required} && 
          (not defined $args{$perlName}) &&
          $response eq '') {
        print "You must enter a value for this argument\n";
      }
      else {
        if ($response eq '' && 
            defined $args{$perlName}) {
          # Keep the same value
        }
        elsif ($response eq '' && 
               defined $arg->{Default}) {
          $args{$perlName} = $arg->{Default};
        }
        else {
          if ($arg->{ValType} eq 'integer') {
            $args{$perlName} =
              StrToNum($response, "Failed to convert $response to number");
          }
          else {
            $args{$perlName} = $response;
          }
        }
        if (($arg->{ValType} eq 'boolean') && 
            (($args{$perlName} eq 'undef') || ($args{$perlName}) eq ''))  {
          $args{$perlName} = undef;
        }
        last;
      }
    }
  }

}



##############################################################################
## LearnArgsFromConfFile - This will open the appropriate .conf file to get
##                       additional arguments
##
##############################################################################
sub LearnArgsFromConfFile {
  my $homeDir;
  if (exists $ENV{'HOME'}) {
    $homeDir = $ENV{'HOME'};
  } else {
    # Some flavour of Windows? Try this:
    $homeDir = $ENV{'USERPROFILE'};
  }
  return if !$homeDir;
  return if !(-e "$homeDir");
  return if !(-e "$homeDir/.scripts");

  my $conf = "$homeDir/.scripts/rs-semp.conf";
  return if !(-e $conf);

  # The file exists - suck it in and parse out the goodness
  open(IN, $conf) || return;
  my @data = <IN>;
  close(IN);

  my $section = "";
  my $quiet = 0;
  foreach my $line (@data) {
    if ($line =~ /^\s*\[([^\]]+)\]/) {
      $section = $1;
    }
    elsif ($section =~ /^(args)|(command-line-args)|(cmd-line-args)|(cmdline-args)/i || $section eq "") {
      if ($line =~ /^\s*([\w\-\_\d]+)\s*=\s*([^\n\s\#\;]+)/) {
        my $arg = $1;
        my $val = $2;
        print "Defaulting argument --$1 to $2 from .conf file\n" unless $quiet;
        # Put the arg at the head of the arg list
        unshift(@ARGV, "--$arg=$val");
      }
      elsif ($line =~ /^\s*([\w\-\_\d]+)\s*$/) {
        my $arg = $1;
        print "Defaulting flag --$1 to on from .conf file\n" unless $quiet;
        # Put the arg at the head of the arg list
        unshift(@ARGV, "--$arg");
      }
    }
    elsif ($section =~ /^global-?settings/i) {
      if ($line =~ /^\s*([\w\-\_\d]+)\s*=\s*([^\n\s\#\;]+)/) {
        my $arg = $1;
        my $val = $2;
        if (lc($arg) eq "quiet") {
          $quiet = $val;
          unshift(@ARGV, "--quiet") if $val;
        }
      }
    }
  }
  
} # LearnArgsFromConfFile


##############################################################################
## GetArgInfo - This will return all the script information in perl
##              struct form.
##
##############################################################################
sub GetArgInfo {

  my $cfgInfo = {
             'PositionalListLocation' => 1,
             'Lang' => 'perl',
             'SuperScriptRevision' => '7505',
             'ShortDescription' => 'Send SEMP to the router',
             'ParsingType' => 'unordered',
             'PositionalListIdx' => undef,
             'Args' => [
                         {
                           'Type' => 'positional',
                           'Required' => 1,
                           'ValType' => 'string',
                           'Description' => 'Router to send SEMP to',
                           'Name' => 'router',
                           'PerlName' => 'router'
                         },
                         {
                           'Default' => 0,
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Description' => 'Show the SEMP XML request',
                           'Name' => 'show-request',
                           'PerlName' => 'show_request'
                         },
                         {
                           'Type' => 'named',
                           'Default' => 'admin',
                           'Required' => 0,
                           'ValType' => 'string',
                           'Description' => 'SEMP username',
                           'Name' => 'username',
                           'PerlName' => 'username'
                         },
                         {
                           'Type' => 'named',
                           'Default' => 'admin',
                           'Required' => 0,
                           'ValType' => 'string',
                           'Description' => 'password',
                           'Name' => 'password',
                           'PerlName' => 'password'
                         },
                         {
                           'Type' => 'named',
                           'Default' => '80',
                           'Required' => 0,
                           'ValType' => 'integer',
                           'Name' => 'port',
                           'Description' => 'Port number for SEMP on the router',
                           'PerlName' => 'port'
                         },
                         {
                           'Type' => 'positional-list',
                           'Default' => [],
                           'Required' => 0,
                           'ValType' => 'string',
                           'Description' => 'SEMP request. This is either the name of an XML file or a CLI string that should be converted to SEMP XML.',
                           'Name' => 'semp',
                           'PerlName' => 'semp'
                         },
                         {
                           'Type' => 'named',
                           'Default' => '',
                           'Required' => 0,
                           'ValType' => 'string',
                           'Description' => 'Specify the SEMP version. This will attempt to find the schema in /home/public/RND/loads/solcbr and use it as the underlying schema',
                           'Name' => 'version',
                           'PerlName' => 'version'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Turn on all debug output.',
                           'Name' => 'debug',
                           'PerlName' => 'debug'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Prints out completion info for the parameters',
                           'Name' => 'gen-completion',
                           'PerlName' => 'gen_completion'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Print out usage info for this script',
                           'Name' => 'help',
                           'PerlName' => 'help'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Query the user for values for each of the arguments, providing help for each.  This will print out the appropriate command line for future reference before executing the script.',
                           'Name' => 'interactive',
                           'PerlName' => 'interactive'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Reduce the amount of output to the bare minimum.',
                           'Name' => 'quiet',
                           'PerlName' => 'quiet'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Print out usage summary for this script',
                           'Name' => 'short-help',
                           'PerlName' => 'short_help'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Print out one line description for this script',
                           'Name' => 'tiny-help',
                           'PerlName' => 'tiny_help'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Print out more user-level output',
                           'Name' => 'verbose',
                           'PerlName' => 'verbose'
                         }
                       ],
             'Name' => 'rs-semp',
             'Description' => 'This script will make a SEMP request to the router and then print out the response
'
           };

  return $cfgInfo;

} # GetArgInfo


##############################################################################
## DisplayCommandLine - This will print out the command line for the
##                      current arguments
##
##############################################################################
sub DisplayCommandLine {

  my $argInfo = GetArgInfo();

  # my $output = "$argInfo->{Name} ";
  my $output = "$0 ";
  my $positional = '';

  foreach my $arg (@{$argInfo->{Args}}) {
    my $name = $arg->{Name};
    my $perlName = $arg->{PerlName};
    if (not defined $args{$perlName}) {
      next;
    }
    if (defined $arg->{Default} && 
        $args{$perlName} eq $arg->{Default}) {
      next;
    }
    if ($perlName eq 'interactive') {
      next;
    }

    my $value = $args{$perlName};
    if ($value =~ /\s/) {
      $value = "'$value'";
    }
    
    if ($arg->{Type} eq 'named') {
      if ($arg->{ValType} eq 'boolean') {
        if (defined $args{$perlName}) {
          if ($args{$perlName} == 0) {
            $output .= "--no-$name ";
          }
          else {
            $output .= "--$name ";
          }
        }
      }
      else {
        $output .= "--$name=$value ";
      }
    }
    else {
      if (ref $value eq 'ARRAY') {
        if (scalar(@{$value} > 1) || $value->[0] ne '') {
          $positional .= "@{$value} ";
        }
      }
      else {
        $positional .= "$value ";
      }
    }

  }
  
  print "Command line:\n";
  print "$output$positional\n\n";
  # `history -s $output$positional`;

} # DisplayCommandLine #


##############################################################################
## Log - Handle output messaging
##
##############################################################################
sub Log {
  my ($level, $message, $addCaller, $opts) = @_;

  return 0 if $level eq 'DEBUG' && !$args{debug};
  return 0 if $level eq 'INFO'  && ($args{quiet} || (!$args{debug} && !$args{verbose}));
  return 0 if $level eq 'WARN'  && $args{quiet};

  print("$level: ") if $level ne 'MSG' || $addCaller;
  if ($addCaller) {
    my @caller = caller(1);
    $caller[1] =~  s/^.*\///;
    print("$caller[1]:$caller[2]: ");
  }
  print("$message\n");

  exit 1 if $level eq 'FATAL';

} # Log #

 
sub Fatal { Log('FATAL', @_) };
sub Error { Log('ERROR', @_) };
sub Warn  { Log('WARN',  @_) };
sub Info  { Log('INFO',  @_) };
sub Debug { Log('DEBUG', @_) };
sub Msg   { Log('MSG',   @_) };



##############################################################################
## StrToNum - Convert strings into numbers
##
##############################################################################
sub StrToNum {
  my ($string, $failMsg) = @_;

  Fatal($failMsg) if $string !~ 
      /^([-+]?_*[1-9][0-9_]*  |
         0x_*[0-9a-f][0-9a-f_]* |
         0b_*[01][01_]*         |
         0[0-7_]*)$
      /xi;

  ($string) = ($string =~ /(.*)/);
  my $num = eval($string);
  
  Fatal($@) if $@;
  return $num;

} # StrToNum #


 

__END__

=head1 NAME

rs-semp

=head1 DESCRIPTION

This script will make a SEMP request to the router and then print out the response


=head1 OPTIONS

rs-semp [OPTIONS] <router> [semp ...] 

Where:

=over

=item router ... (string) B<*Required*>

Router to send SEMP to

=item semp ... (zero or more strings)

SEMP request. This is either the name of an XML file or a CLI string that should be converted to SEMP XML.
[Default: ]

=item --show-request

Show the SEMP XML request

=item --username=<string>

SEMP username
[Default: admin]

=item --password=<string>

password
[Default: admin]

=item --port=<integer>

Port number for SEMP on the router
[Default: 80]

=item --version=<string>

Specify the SEMP version. This will attempt to find the schema in /home/public/RND/loads/solcbr and use it as the underlying schema

=item --interactive

Query the user for values for each of the arguments, providing help for each.  This will print out the appropriate command line for future reference before executing the script.

=item --help, --short-help, --tiny-help

Display various levels of usage information

=item --quiet, --verbose, --debug

Control the amount of information printed during execution

=back

