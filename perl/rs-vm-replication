#!/usr/bin/perl
#
# Script: rs-vm-replication
#
# 
# 
#
# The framework of the script was autogenerated by version 6990 of
# /opt/soldev/devtools/bin/super-script.
#
#############################################################################


use strict;
use warnings;
use Data::Dumper;
use Getopt::Long;
use Pod::Usage;

use constant BOLD    => "\e[1m";
use constant NORMAL  => "\e[0m";
my $BOLD   = BOLD;
my $NORMAL = NORMAL;
my $BOLDr  = "\e[31m\e[1m";  # Red
my $BOLDg  = "\e[32m\e[1m";  # Green


# Main hash - all the argument values will be in here after parsing
my %args = (
            primary_site_a => undef,
            backup_site_a => '',
            primary_site_b => undef,
            backup_site_b => '',
            debug => undef,
            gen_completion => undef,
            help => undef,
            interactive => undef,
            quiet => undef,
            short_help => undef,
            tiny_help => undef,
            verbose => undef,
);

# Arrays to hold the parsed and unparsed args
my @remainingArgs;
my @allArgs;
my @parsedArgs;
my %parsedArgs;

ParseArgs();

##--User Code Start--##

# Don't modify anything outside of the User Code Start/End markers or
# it will be lost if the script's configuration is changed

use FindBin;
use lib "$FindBin::Bin/../../../lib/perl";
use lib "$FindBin::Bin/../lib/perl";
use lib "/opt/cvsdirs/charvey/devtools/lib/perl";  # delete me!
use Solace::Simple;

# Call main - the start of the script
Main();

##############################################################################
## Main - Starting point for the script
##
##############################################################################
sub Main {
    my @routers = ();
    my $aP = Solace::Simple->new(router => $args{primary_site_a},
                                 dieOnError => 1,
                                 debug => $args{debug},
                                 verbose => $args{debug} || $args{verbose});
    if (!$aP->connect("cli")) {
        Error("Connect to $args{primary_site_a} failed");
    }
    push @routers, $aP;
    my $lastRes = $aP->cli('show router-name');
    my ($aP_name) = ($lastRes =~ /Router Name: +(\S*).*/);
    my $aB;
    my $aB_name;
    if ($args{backup_site_a}) {
        $aB = Solace::Simple->new(router => $args{backup_site_a},
                                  dieOnError => 1,
                                  debug => $args{debug},
                                  verbose => $args{debug} || $args{verbose});
        if (!$aB->connect("cli")) {
            Error("Connect to $args{backup_site_a} failed");
        }
        push @routers, $aB;
        $lastRes = $aB->cli('show router-name');
        ($aB_name) = ($lastRes =~ /Router Name: +(\S*).*/);
    }
    my $bP = Solace::Simple->new(router => $args{primary_site_b},
                                 dieOnError => 1,
                                 debug => $args{debug},
                                 verbose => $args{debug} || $args{verbose});
    if (!$bP->connect("cli")) {
        Error("Connect to $args{primary_site_b} failed");
    }
    push @routers, $bP;
    $lastRes = $bP->cli('show router-name');
    my ($bP_name) = ($lastRes =~ /Router Name: +(\S*).*/);
    my $bB;
    my $bB_name;
    if ($args{backup_site_b}) {
        $bB = Solace::Simple->new(router => $args{backup_site_b},
                                  dieOnError => 1,
                                  debug => $args{debug},
                                  verbose => $args{debug} || $args{verbose});
        if (!$bB->connect("cli")) {
            Error("Connect to $args{backup_site_b} failed");
        }
        push @routers, $bB;
        $lastRes = $bB->cli('show router-name');
        ($bB_name) = ($lastRes =~ /Router Name: +(\S*).*/);
    }

    # Make sure redundancy is enabled on site B, if we need it.
    if ($args{backup_site_b}) {
        $lastRes = $bP->cli('show redundancy');
        $lastRes =~ /Configuration Status +: *(\S*).*/;
        my $bRedEnabled = $1;
        if (($bRedEnabled cmp "Shutdown") == 0) {
            print "Redundancy is shutdown on site B. Use rs-vm-config-group before running this script.\n";
            print "rs-vm-config-group --primary=$args{primary_site_b} --backup=$args{backup_site_b} --monitor=your_monitor_node --message-spool --config-sync\n";
            print "You can also omit the --backup-site-b parameter here to continue in standalone mode.\n";
            return;
        }
    }
    # Make sure redundancy is enabled on site A, if we need it.
    if ($args{backup_site_a}) {
        $lastRes = $aP->cli('show redundancy');
        $lastRes =~ /Configuration Status +: *(\S*).*/;
        my $aRedEnabled = $1;
        if (($aRedEnabled cmp "Shutdown") == 0) {
            print "Redundancy is shutdown on site A. Use rs-vm-config-group before running this script.\n";
            print "rs-vm-config-group --primary=$args{primary_site_a} --backup=$args{backup_site_a} --monitor=your_monitor_node --message-spool --config-sync\n";
            print "You can also omit the --backup-site-a parameter here to continue in standalone mode.\n";
            return;
        }
    }

    # get all IP addresses
    $lastRes = $aP->cli('show ip vrf management');
    $lastRes =~ /intf.*static\s+([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*/;
    my $primary_site_a_ip = $1;
    my $backup_site_a_ip = "not set";
    if ($args{backup_site_a}) {
        $lastRes = $aB->cli('show ip vrf management');
        $lastRes =~ /intf.*static\s+([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*/;
        $backup_site_a_ip = $1;
    }
    $lastRes = $bP->cli('show ip vrf management');
    $lastRes =~ /intf.*static\s+([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*/;
    my $primary_site_b_ip = $1;
    my $backup_site_b_ip = "not set";
    if ($args{backup_site_b}) {
        $lastRes = $bB->cli('show ip vrf management');
        $lastRes =~ /intf.*static\s+([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*/;
        $backup_site_b_ip = $1;
    }

    print "\n";
    print "====================GATHERED DATA====================\n";
    print "           -------SITE A-----\n";
    if ($args{backup_site_a}) {
        print "  Primary  (hostlist)\n";
    } else {
        print "  Standalone\n";
    }
    print "    v:$aP_name\n";
    print "    connect-via: $primary_site_a_ip:55555\n";
    if ( $args{backup_site_a} ) {
        print "  Backup   (hostlist)\n";
        print "    v:$aB_name\n";
        print "    connect-via: $backup_site_a_ip:55555\n";
    }
    print "           -------SITE B-----\n";
    if ($args{backup_site_b}) {
        print "  Primary  (hostlist)\n";
    } else {
        print "  Standalone\n";
    }
    print "    v:$bP_name\n";
    print "    connect-via: $primary_site_b_ip:55555\n";
    if ( $args{backup_site_b} ) {
        print "  Backup   (hostlist)\n";
        print "    v:$bB_name\n";
        print "    connect-via: $backup_site_b_ip:55555\n";
    }
    print "=====================================================\n";
    print "\nPress enter to accept. (C-c to quit)\n";
    <STDIN>;

    foreach my $rtr (@routers) {
        $rtr->cli("enable");
        $rtr->cli("configure");
        $rtr->cli("no hardware message-spool shutdown");
        $rtr->cli("no service mate-link shutdown");
        $rtr->cli("no config-sync shutdown");
        $rtr->cli("replication");
        $rtr->cli("  config-sync bridge authentication auth-scheme basic");
        $rtr->cli("  no config-sync bridge shutdown");
    }
    $aP->cli("end");
    $aP->cli("admin");
    $aP->cli("config-sync");
    $aP->cli("assert-master router");
    $aP->cli("end");
    $aP->cli("configure");
    $bP->cli("end");
    $bP->cli("admin");
    $bP->cli("config-sync");
    $bP->cli("assert-master router");
    $bP->cli("end");
    $bP->cli("configure");
    $aP->cli("replication");
    $aP->cli("mate connect-via $primary_site_b_ip:55555");
    if ($args{backup_site_b}) {
        $aP->cli("mate connect-via $backup_site_b_ip:55555");
    }
    $bP->cli("replication");
    $bP->cli("mate connect-via $primary_site_a_ip:55555");
    if ($args{backup_site_a}) {
        $bP->cli("mate connect-via $backup_site_a_ip:55555");
    }
    $aP->cli("mate virtual-router-name v:$bP_name");
    $bP->cli("mate virtual-router-name v:$aP_name");
    foreach my $rtr (@routers) {
        $rtr->cli("end");
        $rtr->cli("configure");
        $rtr->cli("message-vpn default");
        $rtr->cli("replication");
    }
    foreach my $rtr ($aP, $bP) {
        $rtr->cli("bridge authentication auth-scheme basic");
        $rtr->cli("bridge authentication basic client-username default password qwerty");
    }
    $aP->cli("state active");
    $bP->cli("state standby");
    foreach my $rtr ($aP, $bP) {
        $rtr->cli("no shutdown");
    }

    print "Don't forget to add a replicated topic.\n";
    print "create replication replicated-topic #P2P/QUE/queue_name\n";
    print "Under the message-vpn tree.\n"

    # Add code here - all arguments are available in the %args hash
    # Error('Add some code here', 1);
    # Warn('Example warning - will be seen unless --quiet is specified', 1);
    # Info('Example info - will be seen if --verbose is specified', 1);
    # Debug('Example debug - will be seen if --debug is specified', 1);

} # Main #

##--User Code End--##


##############################################################################
## ParseArgs - Parse the command line arguments
##
##############################################################################
sub ParseArgs {
  
  # Options Parsing
  @allArgs = @ARGV;

  my %defaultArgs = %args;
  %args = ();

  # Converts position arguments to names
  my @posToName = (
  );

  # Converts position arguments to names
  my @posToType = (
  );

  # All required arguments
  my %requiredArgs = (
           'primary_site_a' => 1,
           'primary_site_b' => 1,
  );

  # All hides-required arguments
  my %hidesRequiredArgs = (
  );

  # All enum arguments
  my %enumArgs = (
  );

  # Cross ref of perl version of args to command line version
  my %perlToCmdArg = (
                       'primary_site_a' => 'primary-site-a',
                       'backup_site_a' => 'backup-site-a',
                       'primary_site_b' => 'primary-site-b',
                       'backup_site_b' => 'backup-site-b',
                       'debug' => 'debug',
                       'gen_completion' => 'gen-completion',
                       'help' => 'help',
                       'interactive' => 'interactive',
                       'quiet' => 'quiet',
                       'short_help' => 'short-help',
                       'tiny_help' => 'tiny-help',
                       'verbose' => 'verbose',
  );


  LearnArgsFromConfFile();

  my $result = GetOptions (
                           'primary-site-a=s' => \$args{primary_site_a},
                           'backup-site-a=s' => \$args{backup_site_a},
                           'primary-site-b=s' => \$args{primary_site_b},
                           'backup-site-b=s' => \$args{backup_site_b},
                           'debug' => \$args{debug},
                           'gen-completion' => \$args{gen_completion},
                           'help' => \$args{help},
                           'interactive' => \$args{interactive},
                           'quiet' => \$args{quiet},
                           'short-help' => \$args{short_help},
                           'tiny-help' => \$args{tiny_help},
                           'verbose' => \$args{verbose},
  );

  if (!$result) { exit 1; }

  # Positional argument processing

  my $posIdx = 0;
  while (@ARGV) {
    last if $posIdx >= 0;
  
    $args{$posToName[$posIdx]} = shift @ARGV;
    if ($posToType[$posIdx] eq 'integer') {
      $args{$posToName[$posIdx]} = 
         StrToNum($args{$posToName[$posIdx]}, "Invalid argument, failed to convert $args{$posToName[$posIdx]} to number");
    }
    delete $requiredArgs{$posToName[$posIdx]};
    $posIdx++;
  }

  @remainingArgs = @ARGV;
  @parsedArgs = @allArgs[0..(scalar(@allArgs)-scalar(@remainingArgs)-1)];

  Fatal("${BOLDr}Unrecognized argument(s):$NORMAL " . join(' ', @ARGV)) if $#ARGV > -1;

  foreach my $arg (keys(%args)) {
    $parsedArgs{$arg} = 1 if defined $args{$arg};
  }

  foreach my $arg (keys(%defaultArgs)) {
    $args{$arg} = $defaultArgs{$arg} if !defined $args{$arg};
  }

  # Standard option processing

  if ($args{gen_completion}) {
    print "--primary-site-a --backup-site-a --primary-site-b --backup-site-b --debug --help --interactive --quiet --short-help --tiny-help --verbose ";
    exit 1;
  }

  if ($args{help}) {
    
    pod2usage(-verbose => 2);    
    exit 1;
  }
  if ($args{short_help}) {
    
    pod2usage(-verbose => 1);
    exit 1;
  }
  if ($args{tiny_help}) {
    my $info = GetArgInfo();
    print "$info->{Name} - $info->{ShortDescription}\n";
    exit 1;
  }

  my $showCmdLine = 0;
  if ($args{interactive}) {
    PromptForArgs(1, %args);
    $showCmdLine = 1;
  }

  my $hidesRequired = 0;
  foreach my $key (keys(%hidesRequiredArgs)) {
    if (defined $args{$key}) {
      $hidesRequired = 1;
      last;
    }
  }
  
  # Check for missing required params
  if (!$hidesRequired) {
    foreach my $key (keys(%requiredArgs)) {
      if (defined $args{$key}) {
        delete $requiredArgs{$key};
      }
    }
    if (scalar(keys(%requiredArgs)) > 0) {
      print "\nMissing some required parameters\n";
      PromptForArgs(1, %requiredArgs);
      $showCmdLine = 1;
    }
  }
  
  # Check that enums have valid values
  my $argInfo = GetArgInfo();
  foreach my $arg (keys(%enumArgs)) {
    if (defined $args{$arg}) {
      my $argList = ref($args{$arg}) ? $args{$arg} : [$args{$arg}];
      foreach my $val (@{$argList}) {
        if (not defined $enumArgs{$arg}{$val}) {
          print "\nInvalid value '$val' for argument $arg.  Valid values are:\n";
          foreach my $value (keys(%{$enumArgs{$arg}})) {
            print "  $value\n";
          }
          exit 1;
        }
      }
    }
  }
  
  if ($showCmdLine) {
    # Output the command line for this
    DisplayCommandLine();
  }

} # ParseArgs #

##############################################################################
## PromptForArgs - Will ask the user for values for various arguments
##
## skipAutoArgs: When true, it will not prompt for --interactive, --debug,
##               --quiet, --verbose or --help
##
##############################################################################
sub PromptForArgs {
  my ($skipAutoArgs, %argsForPrompting) = @_;
  my $argInfo = GetArgInfo();
  
  print "\nInteractive Input:\n\n";
  foreach my $arg (@{$argInfo->{Args}}) {
    my $name = $arg->{Name};
    my $perlName = $arg->{PerlName};
    if (not exists $argsForPrompting{$perlName}) {
      next;
    }
    if ($skipAutoArgs && 
        ($name =~ /^(debug|interactive|quiet|verbose|help|gen-completion)$/)) {
      next;
    }
    my $desc = $arg->{Description};
    my $space = " " x (length($name) + 3);
    $desc =~ s/(.{1,75 - length($name)})(?:\s|$|\n)/$1\n$space/g;
    my $prompt = "\n$BOLD$name$NORMAL - $arg->{Description}";
    my $default = '';
    my $defVal = '';
    if (defined $args{$perlName}) {
      $default = " [$args{$perlName}]";
      $defVal = $args{$perlName};
    }
    elsif ($arg->{Default}) {
      $default = " [$arg->{Default}]";
      $defVal = $arg->{Default};
    }
    while (1) {
      if ($arg->{ValType} eq 'boolean') {
        print $prompt . "\nEnter value for flag (undef, 0 or 1)$default: ";
      }
      elsif ($arg->{ValType} =~ /integer|float/) {
        print $prompt . "\nEnter numeric value$default: ";
      }
      elsif ($arg->{ValType} eq 'enum') {
        print $prompt . "\nSelect value: ";
      }
      else {
        print $prompt . "\nEnter value$default: ";
      }
      my $response;
      if ($arg->{ValType} eq 'enum') {
        print "\n";
        $default = '';
        my $num = 1;
        my $defaultNum;
        foreach my $val (@{$arg->{EnumList}}) {
          print "  $num: $val\n";
          if ($val eq $defVal) {
            $default = "[$num]";
            $defaultNum = $num;
          }
          $num++;
        }
        while (1) {
          print "Select number$default: "; 
          chomp($response = <STDIN>);
          if ($response eq '') {
            $response = defined $defaultNum ? $defaultNum : 0;
          }
          if ($response >= 1 &&
              $response <= scalar(@{$arg->{EnumList}})) {
            $response = $arg->{EnumList}[$response-1];
            last;
          }
          print "Invalid selection - try again\n";
        }
      }
      else {
        chomp($response = <STDIN>);
      }
      if ($arg->{Required} && 
          (not defined $args{$perlName}) &&
          $response eq '') {
        print "You must enter a value for this argument\n";
      }
      else {
        if ($response eq '' && 
            defined $args{$perlName}) {
          # Keep the same value
        }
        elsif ($response eq '' && 
               defined $arg->{Default}) {
          $args{$perlName} = $arg->{Default};
        }
        else {
          if ($arg->{ValType} eq 'integer') {
            $args{$perlName} =
              StrToNum($response, "Failed to convert $response to number");
          }
          else {
            $args{$perlName} = $response;
          }
        }
        if (($arg->{ValType} eq 'boolean') && 
            (($args{$perlName} eq 'undef') || ($args{$perlName}) eq ''))  {
          $args{$perlName} = undef;
        }
        last;
      }
    }
  }

}



##############################################################################
## LearnArgsFromConfFile - This will open the appropriate .conf file to get
##                       additional arguments
##
##############################################################################
sub LearnArgsFromConfFile {
  my $homeDir;
  if (exists $ENV{'HOME'}) {
    $homeDir = $ENV{'HOME'};
  } else {
    # Some flavour of Windows? Try this:
    $homeDir = $ENV{'USERPROFILE'};
  }
  return if !$homeDir;
  return if !(-e "$homeDir");
  return if !(-e "$homeDir/.scripts");

  my $conf = "$homeDir/.scripts/rs-vm-replication.conf";
  return if !(-e $conf);

  # The file exists - suck it in and parse out the goodness
  open(IN, $conf) || return;
  my @data = <IN>;
  close(IN);

  my $section = "";
  my $quiet = 0;
  foreach my $line (@data) {
    if ($line =~ /^\s*\[([^\]]+)\]/) {
      $section = $1;
    }
    elsif ($section =~ /^(args)|(command-line-args)|(cmd-line-args)|(cmdline-args)/i || $section eq "") {
      if ($line =~ /^\s*([\w\-\_\d]+)\s*=\s*([^\n\s\#\;]+)/) {
        my $arg = $1;
        my $val = $2;
        print "Defaulting argument --$1 to $2 from .conf file\n" unless $quiet;
        # Put the arg at the head of the arg list
        unshift(@ARGV, "--$arg=$val");
      }
      elsif ($line =~ /^\s*([\w\-\_\d]+)\s*$/) {
        my $arg = $1;
        print "Defaulting flag --$1 to on from .conf file\n" unless $quiet;
        # Put the arg at the head of the arg list
        unshift(@ARGV, "--$arg");
      }
    }
    elsif ($section =~ /^global-?settings/i) {
      if ($line =~ /^\s*([\w\-\_\d]+)\s*=\s*([^\n\s\#\;]+)/) {
        my $arg = $1;
        my $val = $2;
        if (lc($arg) eq "quiet") {
          $quiet = $val;
          unshift(@ARGV, "--quiet") if $val;
        }
      }
    }
  }
  
} # LearnArgsFromConfFile


##############################################################################
## GetArgInfo - This will return all the script information in perl
##              struct form.
##
##############################################################################
sub GetArgInfo {

  my $cfgInfo = {
             'Lang' => 'perl',
             'SuperScriptRevision' => '6990',
             'ShortDescription' => ' ',
             'ParsingType' => 'unordered',
             'Description' => '
',
             'Name' => 'rs-vm-replication',
             'Args' => [
                         {
                           'Type' => 'named',
                           'Required' => 1,
                           'ValType' => 'string',
                           'Name' => 'primary-site-a',
                           'Description' => 'xxx.xxx.xxx.xxx:pppp',
                           'PerlName' => 'primary_site_a'
                         },
                         {
                           'Type' => 'named',
                           'Default' => '',
                           'Required' => 0,
                           'ValType' => 'string',
                           'Description' => 'xxx.xxx.xxx.xxx:pppp',
                           'Name' => 'backup-site-a',
                           'PerlName' => 'backup_site_a'
                         },
                         {
                           'Type' => 'named',
                           'Required' => 1,
                           'ValType' => 'string',
                           'Name' => 'primary-site-b',
                           'Description' => 'xxx.xxx.xxx.xxx:pppp',
                           'PerlName' => 'primary_site_b'
                         },
                         {
                           'Type' => 'named',
                           'Default' => '',
                           'Required' => 0,
                           'ValType' => 'string',
                           'Description' => 'xxx.xxx.xxx.xxx:pppp',
                           'Name' => 'backup-site-b',
                           'PerlName' => 'backup_site_b'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Turn on all debug output.',
                           'Name' => 'debug',
                           'PerlName' => 'debug'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Prints out completion info for the parameters',
                           'Name' => 'gen-completion',
                           'PerlName' => 'gen_completion'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Print out usage info for this script',
                           'Name' => 'help',
                           'PerlName' => 'help'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Query the user for values for each of the arguments, providing help for each.  This will print out the appropriate command line for future reference before executing the script.',
                           'Name' => 'interactive',
                           'PerlName' => 'interactive'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Reduce the amount of output to the bare minimum.',
                           'Name' => 'quiet',
                           'PerlName' => 'quiet'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Print out usage summary for this script',
                           'Name' => 'short-help',
                           'PerlName' => 'short_help'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Print out one line description for this script',
                           'Name' => 'tiny-help',
                           'PerlName' => 'tiny_help'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Print out more user-level output',
                           'Name' => 'verbose',
                           'PerlName' => 'verbose'
                         }
                       ],
             'PositionalListIdx' => undef
           };

  return $cfgInfo;

} # GetArgInfo


##############################################################################
## DisplayCommandLine - This will print out the command line for the
##                      current arguments
##
##############################################################################
sub DisplayCommandLine {

  my $argInfo = GetArgInfo();

  # my $output = "$argInfo->{Name} ";
  my $output = "$0 ";
  my $positional = '';

  foreach my $arg (@{$argInfo->{Args}}) {
    my $name = $arg->{Name};
    my $perlName = $arg->{PerlName};
    if (not defined $args{$perlName}) {
      next;
    }
    if (defined $arg->{Default} && 
        $args{$perlName} eq $arg->{Default}) {
      next;
    }
    if ($perlName eq 'interactive') {
      next;
    }

    my $value = $args{$perlName};
    if ($value =~ /\s/) {
      $value = "'$value'";
    }
    
    if ($arg->{Type} eq 'named') {
      if ($arg->{ValType} eq 'boolean') {
        if (defined $args{$perlName}) {
          if ($args{$perlName} == 0) {
            $output .= "--no-$name ";
          }
          else {
            $output .= "--$name ";
          }
        }
      }
      else {
        $output .= "--$name=$value ";
      }
    }
    else {
      if (ref $value eq 'ARRAY') {
        if (scalar(@{$value} > 1) || $value->[0] ne '') {
          $positional .= "@{$value} ";
        }
      }
      else {
        $positional .= "$value ";
      }
    }

  }
  
  print "Command line:\n";
  print "$output$positional\n\n";
  # `history -s $output$positional`;

} # DisplayCommandLine #


##############################################################################
## Log - Handle output messaging
##
##############################################################################
sub Log {
  my ($level, $message, $addCaller, $opts) = @_;

  return 0 if $level eq 'DEBUG' && ($args{quiet} || !$args{debug});
  return 0 if $level eq 'INFO'  && ($args{quiet} || (!$args{debug} && !$args{verbose}));
  return 0 if $level eq 'WARN'  && $args{quiet};

  print("$level: ") if $level ne 'MSG' || $addCaller;
  if ($addCaller) {
    my @caller = caller(1);
    $caller[1] =~  s/^.*\///;
    print("$caller[1]:$caller[2]: ");
  }
  print("$message\n");

  exit 1 if $level eq 'FATAL';

} # Log #

 
sub Fatal { Log('FATAL', @_) };
sub Error { Log('ERROR', @_) };
sub Warn  { Log('WARN',  @_) };
sub Info  { Log('INFO',  @_) };
sub Debug { Log('DEBUG', @_) };
sub Msg   { Log('MSG',   @_) };



##############################################################################
## StrToNum - Convert strings into numbers
##
##############################################################################
sub StrToNum {
  my ($string, $failMsg) = @_;

  Fatal($failMsg) if $string !~ 
      /^([-+]?_*[1-9][0-9_]*  |
         0x_*[0-9a-f][0-9a-f_]* |
         0b_*[01][01_]*         |
         0[0-7_]*)$
      /xi;

  ($string) = ($string =~ /(.*)/);
  my $num = eval($string);
  
  Fatal($@) if $@;
  return $num;

} # StrToNum #


 

__END__

=head1 NAME

rs-vm-replication

=head1 DESCRIPTION




=head1 OPTIONS

rs-vm-replication [OPTIONS] 

Where:

=over

=item --primary-site-a=<string> B<*Required*>

xxx.xxx.xxx.xxx:pppp

=item --backup-site-a=<string>

xxx.xxx.xxx.xxx:pppp

=item --primary-site-b=<string> B<*Required*>

xxx.xxx.xxx.xxx:pppp

=item --backup-site-b=<string>

xxx.xxx.xxx.xxx:pppp

=item --interactive

Query the user for values for each of the arguments, providing help for each.  This will print out the appropriate command line for future reference before executing the script.

=item --help, --short-help, --tiny-help

Display various levels of usage information

=item --quiet, --verbose, --debug

Control the amount of information printed during execution

=back

