#!/usr/bin/env run-router-script
#

# Configure DMR state in a set of routers. Any number of routers can
# be provided as the initial argument as a comma-separated list.
#
# A cluster is created on each of these routers if one does not
# already exist. By default the name of the cluster is the same as the
# router, making it unique, unless a cluster-name is provided. A
# common cluster-name is useful for internal links. Unique
# cluster-names are useful for external links.
#
# By default, DMR is enabled for the "default" MsgVpn. An arbitray
# list of VPNs can be provided if desired.
#
# By default, links are created full-mesh between all routers. If
# desired, a list of routers can be provided, which will have a full
# mesh of links created between.

<%args>
clusterName => ""            # name of the cluster
directOnly  => 0             # direct-only cluster

vpns        => "default"     # comma-separated list of VPNs to enable for DMR

links       => ""            # comma-separated list of routers to link
zip         => 0             # use compressed links
ssl         => 0             # use encrypted links
span        => "external"    # internal or external

focus       => ""            # focus all config on single router
</%args>

% use Data::Dumper;

% RrsShowOutput(0);

% my @vpnList = split(/,/,$vpns);
% if ($directOnly) {
%   $directOnly = "direct-only";
% }
% else {
%   $directOnly = "";
% }


## Gather this info for all nodes.
% my %info; 
% my ($rn, $ip, $mate, $mateIp, $cn, $nn);

% for my $i (0 .. ($rrsNumRouters-1)) {
%   print "Learning configuration of $rrsRouterNames[$i]...\n";

<%script router-num="$i" type="cli">
home
enable
show router-name

%   ($rn) = ($rrsLastResult =~ /Router Name:\s+([^\s]+)/);

%   my $routingVrf = "management";

show ip vrf <% $routingVrf %>

%   ($ip) = ($rrsLastResult =~ /.*static\s+([\d\.]+)/);

%   $mate = "";
%   $mateIp = "";

show redundancy
%   ($mate) = ($rrsLastResult =~ /Mate Router Name\s+: (.*)/);
%   if ($mate) {

show redundancy group node <% $mate %>

%     ($mateIp) = ($rrsLastResult =~ /.*Message-Router *([\d\.]*)/);
%   }

show cluster *

%   ($cn) = ($rrsLastResult =~ /Cluster Name\s+: (.*)/);
%   if (!$cn) {
%     $cn = $clusterName;
%     if (!$cn) {
%       $cn = $rn;
%     }
%   }

%   if ($focus eq "" || $focus eq $rn) {

home
enable
configure
routing
dynamic-message-routing
! pragma:interpreter:ignore-already-exists
create cluster <% $cn %> <% $directOnly %>
! pragma:interpreter:no-ignore-already-exists
shutdown
authentication basic auth-type none
no ssl server-certificate-validation enforce-trusted-common-name

%   }

show cluster <% $cn %>

%   ($cn) = ($rrsLastResult =~ /Cluster Name\s+: (.*)/);
%   ($nn) = ($rrsLastResult =~ /Node Name\s*:\s+([^\s]+)/);

%   $info{$nn}{RrsNum}     = $i;
%   $info{$nn}{RouterName} = $rn;
%   $info{$nn}{Ip}         = $ip;
%   $info{$nn}{Mate}       = $mate;
%   $info{$nn}{MateIp}     = $mateIp;
%   $info{$nn}{Cluster}    = $cn;

%   if ($focus eq "" || $focus eq $rn) {

home
enable
configure

%     for my $vn (@vpnList) {

home
enable
configure
message-vpn <% $vn %>
no dynamic-message-routing shutdown

%     }
%   }
% }

% RrsShowOutput(1);

% my @linkList = keys(%info);
% if ($links) {
%   @linkList = split(/,/,$links);
% }

% while (my ($k,$v) = each (%info)) {
%   printf("\nNode Name:      %s\n", $k);
%   printf("  Router Name:  %s\n", $v->{RouterName});
%   printf("  Ip Addr:      %s\n", $v->{Ip});
%   printf("  Mate Name:    %s\n", $v->{Mate});
%   printf("  Mate Ip Addr: %s\n", $v->{MateIp});
%   printf("  Cluster Name: %s\n", $v->{Cluster});

%   if ( ($focus eq "" || $focus eq $v->{RouterName}) && grep { /$k/ } @linkList ) {

%     my $rrsNum = $v->{RrsNum};

<%script router-num="$rrsNum" type="cli">

home
enable
configure
routing
dynamic-message-routing 
cluster <% $v->{Cluster} %>
no shutdown

%     for my $link (@linkList) {
%       if ($link ne $k) {
%         print "Creating link to $link...\n";

! pragma:interpreter:ignore-already-exists
create link <% $link %>
! pragma:interpreter:no-ignore-already-exists

shutdown

connect-via <% $info{$link}{Ip} %>

%       if ($info{$link}{Mate}) {

connect-via <% $info{$link}{MateIp} %>

%       }

%       if ($zip) {
transport compressed
%       }

%       if ($ssl) {
transport ssl
%       }
span <% $span %>

no shutdown
exit


%       }
%     }
%   }

% }

% RrsShowOutput(1);

