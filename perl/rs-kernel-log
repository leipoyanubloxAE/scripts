#!/usr/bin/perl
#
# Script: rs-kernel-log
#
# This script will log into the specified router and do a tail -F on the
# kernel.log.  You can apply a regex filter (see arguments).
# 
#
# The framework of the script was autogenerated by version 5118 of
# /usr/local/devtools/bin/super-script.
#
#############################################################################


use strict;
use warnings;
use Data::Dumper;
use Getopt::Long;
use Pod::Usage;

use constant BOLD    => "\e[1m";
use constant NORMAL  => "\e[0m";

my $BOLD   = BOLD;
my $NORMAL = NORMAL;
my $BOLDr  = "[31m[1m";  # Red
my $BOLDg  = "[32m[1m";  # Green

# Main hash - all the argument values will be in here after parsing
my %args = (
            router => undef,
            lines => '100000',
            filter => '',
            debug => undef,
            gen_completion => undef,
            help => undef,
            interactive => undef,
            quiet => undef,
            short_help => undef,
            tiny_help => undef,
            verbose => undef,
);

# Arrays to hold the parsed and unparsed args
my @remainingArgs;
my @allArgs;
my @parsedArgs;
my %parsedArgs;

ParseArgs();

##--User Code Start--##

# Don't modify anything outside of the User Code Start/End markers or
# it will be lost if the script's configuration is changed

use Term::ReadKey;
use Term::Pager;
use English;
use Expect;
use FindBin;
# Favour $USER/lib/perl when run from $USER/exec, second line takes precedence
use lib "$FindBin::Bin/lib/perl";
use lib "$FindBin::Bin/../lib/perl";
use Solace::LogParser;



# Connection to the router (via expect)
my $routerExp;

# Globals to hold the screen's dimensions
my ($termWidth_g, $termHeight_g) = GetTerminalSize();

# Globals to hold the data
my $lineWrPtr_g = 0;
my @data;

# Constants to do efficient array storage (rather than hash)
my $enum = 0;
use constant FIELD_DATE => $enum++;
use constant FIELD_TIME => $enum++;
use constant FIELD_FACILITY => $enum++;
use constant FIELD_LEVEL => $enum++;
use constant FIELD_ROUTER => $enum++;
use constant FIELD_USER => $enum++;
use constant FIELD_PID => $enum++;
use constant FIELD_MSG => $enum++;
use constant NUM_FIELDS => $enum;

##
# Globals for selecting columns
##

# Column control
my %colControl_g = ((FIELD_DATE) => {Enabled => 0},
                    (FIELD_TIME) => {Enabled => 1},
                    (FIELD_FACILITY) => {Enabled => 1},
                    (FIELD_LEVEL) => {Enabled => 1},
                    (FIELD_ROUTER) => {Enabled => 0},
                    (FIELD_USER) => {Enabled => 1},
                    (FIELD_PID) => {Enabled => 1},
                    (FIELD_MSG) => {Enabled => 1},
);

# Columns displayed by default
my @selCols_g;

# Info about the columns
my %colInfo_g = ((FIELD_DATE) => {Format => "%-8s", Width => 10},
                 (FIELD_TIME) => {Format => "%-8s", Width => 8},
                 (FIELD_FACILITY) => {Format => "%-8s", Width => 8},
                 (FIELD_LEVEL) => {Format => "%-8s", Width => 8},
                 (FIELD_ROUTER) => {Format => "%-8s", Width => 8},
                 (FIELD_USER) => {Format => "%-30s", Width => 30},
                 (FIELD_PID) => {Format => "%-16s", Width => 16},
                 (FIELD_MSG)  => {Format => "%s", Width => -1}
);

# Format string for the currently selected columns
my $colFormat_g = "";

# Keep track of where the message column will start
my $msgStartCol_g;


# Handler for window changes
$SIG{WINCH} = 'WindowChangeHandler';


# Call main - the start of the script
Main();

##############################################################################
## Main - Starting point for the script
##
##############################################################################
sub Main {

  UpdateColumnInfo();

  while (1) {
    ConnectToRouter(\$routerExp);
    DisplayLog($routerExp);
  }

}


##############################################################################
## UpdateColumnInfo - 
##
## calculates some information about the currently select columns 
##
##############################################################################
sub UpdateColumnInfo {

  for my $col (0 .. NUM_FIELDS-1) {
    if($colControl_g{$col}{Enabled}) {
      push(@selCols_g, $col);
    }
  }

  foreach my $col (@selCols_g) {
    $colFormat_g .= "$colInfo_g{$col}{Format}  ";
    if ($col ne "Msg") {
      $msgStartCol_g += $colInfo_g{$col}{Width} + 2;
    }
  }
  $msgStartCol_g += 9; 
  $colFormat_g .= "\n";

} # UpdateColumnInfo #



##############################################################################
## DisplayLog - Read the log entries from the router and display them 
##
##############################################################################
sub DisplayLog {
  my ($exp) = @_;

  my $line = 0;

  my $ping = new Expect();
  $ping->raw_pty(1);
  $ping->log_stdout(0);
  $ping->spawn("ping", $args{router});

  $exp->send("tail -F --lines=$termHeight_g /usr/sw/jail/logs/kernel.log\r");
  $exp->expect(5, "\n");
#  $exp->clear_accum();

  my $pingCountDown = 15;

  ReadMode 4;
  
  while (1) {
    my ($match, $error) = $exp->expect(0.3, "\n");
    if (defined $error && $error ne "1:TIMEOUT") {
      print "Error: $error\n";
      return;
    }
    my $output = $exp->before();
    if (defined $match || (defined $output && $output ne "")) {

      if ($output =~ /^==>/) {
        next;
      }
      if ($output =~ /^\s*\r?$/) {
        next;
      }

      if ($args{filter} ne '' && $output !~ /$args{filter}/) {
        next;
      }

      my ($date, $time, $facility, $level, $router, $user, $pid, $msg) =
$output =~ /^(.+?)T(.+?)\s+?\<(\w+)\.(\w+)\>\s+?([\w-]+?)\s+?(.+?)(\[.+?\])\:*\s+?(.+)\s*$/;

      if (!$date) {
        next;
      }

      StoreFields($date, $time, $facility, $level, $router, $user, $pid, $msg);
      UpdateScreen();

    }
    else {
      $pingCountDown--;
      if ($pingCountDown <= 0) {
        # printf("Checking ping\n");
        my $match = $ping->expect(0, "time=");
        $pingCountDown = 15;
        # print "before: " . $ping->before() ."\n";
        if (!defined $match) {
          # Connection down
          return;
        }
        else {
          while ($ping->expect(0, "time=")) {}
        }
      }
    }

    while (1) {
      ReadMode 4;
      my $char = ReadKey(-1);
      # ReadMode 0;
      if (defined $char) {
        # print "received: " . ord($char) ."\n";
        if ($char eq "m") { 
          # Back from more - dump out the last N lines
          # TODO
        } elsif (ord($char) == 27) { 
          ReadMode 4;
          $char = ReadKey(-1);
          # ReadMode 0;

          if (ord($char) == 91) { 
            ReadMode 4;
            $char = ReadKey(-1);
            # ReadMode 0;

            if (ord($char) == 65) { 
              Debug("up");
            } elsif (ord($char) == 66) { 
              Debug("down");
            }
          }
        
          # Back from more - dump out the last N lines
          # TODO
        } elsif (($char eq "") || ($char eq "q")) {
          print "Exiting\n";
          ReadMode 0;
          exit(0);
        } elsif (ord($char) == 10) {
          print "\n";
        } else {
          Debug("received: " . ord($char));
        }
      }
      else {
        last;
      }
    }
  }


} # DisplayLog #


##############################################################################
## UpdateScreen - 
##
## This will redraw the screen with the appropriate columns, showing the
## requested range. 
##
##############################################################################
sub UpdateScreen {
  my ($lastLine) = @_;
  
  # print "$output\n";
  my @params;
  foreach my $col (@selCols_g) {
    push(@params, $data[$col][$lineWrPtr_g-1]);
  }
  
  my $text = sprintf($colFormat_g, @params);
  
  if (length($text) > $termWidth_g) {
    # Word wrap the text
    my $indent = " " x $msgStartCol_g;
    $text =~ s/^(.{1,$termWidth_g})\s+/$1\n$indent/g;
    print $text;
  }
  else {
    print "$text";
  }

} # UpdateScreen #


##############################################################################
## StoreFields - 
##
## Put all the parsed fields into a datastructure so that we can access them
## later 
##
##############################################################################
sub StoreFields {

  my $idx = 0;
  foreach my $field (@_) {
    $data[$idx][$lineWrPtr_g] = $field;
    $idx++;
  }

  $lineWrPtr_g++;
  if ($lineWrPtr_g >= $args{lines}) {
    $lineWrPtr_g = 0;
  }

} # StoreFields #



##############################################################################
## ConnectToRouter - This will log into the router 
##
##############################################################################
sub ConnectToRouter {
  my ($expPtr) = @_;

  ReadMode 0;
  print "Trying to connect to $args{router}...";
  while(1) {
    $$expPtr = new Expect();
    $$expPtr->raw_pty(1);
    $$expPtr->log_stdout(0);
    $$expPtr->spawn("ssh", "support\@$args{router}");
  
    my $match = $$expPtr->expect(5, 
                                 ['-re', 'Password: '], 
                                 ['-re', '\]\$ ']);
    if ($match) {
      if ($match == 2) {
        last;
      }
      elsif ($match == 1) {
        $$expPtr->send("support\r");
        $match = $$expPtr->expect(5, 
                                  ['-re', '\]\$ ']);
        if ($match) {
          last;
        }
      }
    }
    print ".";
    sleep(1);
  }

  $$expPtr->clear_accum();
  
  print "\n";

} # ConnectToRouter #



##############################################################################
## WindowChangeHandler - Called when we receive a window change signal 
##
##############################################################################
sub WindowChangeHandler {

  ($termWidth_g, $termHeight_g) = GetTerminalSize();
  # print "Window is now ${termWidth_g}x$termHeight_g\n";

} # WindowChangeHandler #




##--User Code End--##



##############################################################################
## ParseArgs - Will do all the argument parsing
##
##############################################################################
sub ParseArgs {
  
  # Options Parsing
  @allArgs = @ARGV;

  my %defaultArgs = %args;
  %args = ();

  # Converts position arguments to names
  my @posToName = (
              'router',
              'filter',
  );

  # Converts position arguments to names
  my @posToType = (
              'string',
              'string',
  );

  # All required arguments
  my %requiredArgs = (
                       'router' => 1,
  );

  # All enum arguments
  my %enumArgs = (
  );

  # Cross ref of perl version of args to command line version
  my %perlToCmdArg = (
                       'router' => 'router',
                       'lines' => 'lines',
                       'filter' => 'filter',
                       'debug' => 'debug',
                       'gen_completion' => 'gen-completion',
                       'help' => 'help',
                       'interactive' => 'interactive',
                       'quiet' => 'quiet',
                       'short_help' => 'short-help',
                       'tiny_help' => 'tiny-help',
                       'verbose' => 'verbose',
  );


  LearnArgsFromConfFile();

  my $result = GetOptions (
                           'lines=o' => \$args{lines},
                           'debug' => \$args{debug},
                           'gen-completion' => \$args{gen_completion},
                           'help' => \$args{help},
                           'interactive' => \$args{interactive},
                           'quiet' => \$args{quiet},
                           'short-help' => \$args{short_help},
                           'tiny-help' => \$args{tiny_help},
                           'verbose' => \$args{verbose},
  );

  if (!$result) { exit 1; }


  # Positional argument processing

  my $posIdx = 0;
  while (@ARGV) {
    if ($posIdx >= 2) {
      last;
    }
  
    $args{$posToName[$posIdx]} = shift @ARGV;
    if ($posToType[$posIdx] eq 'integer') {
      $args{$posToName[$posIdx]} = 
         StrToNum($args{$posToName[$posIdx]}, "Failed to convert $args{$posToName[$posIdx]} to number");
    }
    delete $requiredArgs{$posToName[$posIdx]};
    $posIdx++;
  }
  @remainingArgs = @ARGV;
  @parsedArgs = @allArgs[0..(scalar(@allArgs)-scalar(@remainingArgs)-1)];

  if($#ARGV > -1) { 
    print "${BOLDr}Unrecognized argument(s):$NORMAL ";
    foreach (@ARGV) { print "$_ "; } print "\n";
    exit 1;
  }

  # Copy over all the arguments that were parsed
  foreach my $arg (keys(%args)) {
    if (defined $args{$arg}) {
      $parsedArgs{$arg} = 1;
    }
  }

  # Put back the default arguments
  foreach my $arg (keys(%defaultArgs)) {
    if (!defined($args{$arg})) {
      $args{$arg} = $defaultArgs{$arg};
    }
  }


  # Standard option processing

  if ($args{gen_completion}) {
    print "--lines --debug --help --interactive --quiet --short-help --tiny-help --verbose ";
    exit 1;
  }

  if ($args{help}) {
    pod2usage(-verbose => 2);    
    exit 1;
  }
  if ($args{short_help}) {
    pod2usage(-verbose => 1);
    exit 1;
  }
  if ($args{tiny_help}) {
    my $info = GetArgInfo();
    print "$info->{Name} - $info->{ShortDescription}\n";
    exit 1;
  }
  my $showCmdLine = 0;
  if ($args{interactive}) {
    PromptForArgs(1, %args);
    $showCmdLine = 1;
  }
  
  # Check for missing required params
  foreach my $key (keys(%requiredArgs)) {
    if (defined $args{$key}) {
      delete $requiredArgs{$key};
    }
  }
  if (scalar(keys(%requiredArgs)) > 0) {
    print "\nMissing some required parameters\n";
    PromptForArgs(1, %requiredArgs);
    $showCmdLine = 1;
  }
  
  # Check that enums have valid values
  my $argInfo = GetArgInfo();
  foreach my $arg (keys(%enumArgs)) {
    if (defined $args{$arg}) {
      if (not defined $enumArgs{$arg}{$args{$arg}}) {
        print "\nInvalid value for argument $arg.  Valid values are:\n";
        foreach my $value (keys(%{$enumArgs{$arg}})) {
          print "  $value\n";
        }
        exit 1;
      }
    }
  }
  
  if ($showCmdLine) {
    # Output the command line for this
    DisplayCommandLine();
  }

} # ParseArgs


##############################################################################
## PromptForArgs - Will ask the user for values for various arguments
##
## skipAutoArgs: When true, it will not prompt for --interactive, --debug,
##               --quiet, --verbose or --help
##
##############################################################################
sub PromptForArgs {
  my ($skipAutoArgs, %argsForPrompting) = @_;
  my $argInfo = GetArgInfo();
  
  print "\nInteractive Input:\n\n";
  foreach my $arg (@{$argInfo->{Args}}) {
    my $name = $arg->{Name};
    my $perlName = $arg->{PerlName};
    if (not exists $argsForPrompting{$perlName}) {
      next;
    }
    if ($skipAutoArgs && 
        ($name =~ /^(debug|interactive|quiet|verbose|help|gen-completion)$/)) {
      next;
    }
    my $desc = $arg->{Description};
    my $space = " " x (length($name) + 3);
    $desc =~ s/(.{1,75 - length($name)})(?:\s|$|\n)/$1\n$space/g;
    my $prompt = "\n$BOLD$name$NORMAL - $arg->{Description}";
    my $default = '';
    my $defVal = '';
    if (defined $args{$perlName}) {
      $default = " [$args{$perlName}]";
      $defVal = $args{$perlName};
    }
    elsif ($arg->{Default}) {
      $default = " [$arg->{Default}]";
      $defVal = $arg->{Default};
    }
    while (1) {
      if ($arg->{ValType} eq 'boolean') {
        print $prompt . "\nEnter value for flag (undef, 0 or 1)$default: ";
      }
      elsif ($arg->{ValType} =~ /integer|float/) {
        print $prompt . "\nEnter numeric value$default: ";
      }
      elsif ($arg->{ValType} eq 'enum') {
        print $prompt . "\nSelect value: ";
      }
      else {
        print $prompt . "\nEnter value$default: ";
      }
      my $response;
      if ($arg->{ValType} eq 'enum') {
        print "\n";
        $default = '';
        my $num = 1;
        my $defaultNum;
        foreach my $val (@{$arg->{EnumList}}) {
          print "  $num: $val\n";
          if ($val eq $defVal) {
            $default = "[$num]";
            $defaultNum = $num;
          }
          $num++;
        }
        while (1) {
          print "Select number$default: "; 
          chomp($response = <STDIN>);
          if ($response eq '') {
            $response = defined $defaultNum ? $defaultNum : 0;
          }
          if ($response >= 1 &&
              $response <= scalar(@{$arg->{EnumList}})) {
            $response = $arg->{EnumList}[$response-1];
            last;
          }
          print "Invalid selection - try again\n";
        }
      }
      else {
        chomp($response = <STDIN>);
      }
      if ($arg->{Required} && 
          (not defined $args{$perlName}) &&
          $response eq '') {
        print "You must enter a value for this argument\n";
      }
      else {
        if ($response eq '' && 
            defined $args{$perlName}) {
          # Keep the same value
        }
        elsif ($response eq '' && 
               defined $arg->{Default}) {
          $args{$perlName} = $arg->{Default};
        }
        else {
          if ($arg->{ValType} eq 'integer') {
            $args{$perlName} =
              StrToNum($response, "Failed to convert $response to number");
          }
          else {
            $args{$perlName} = $response;
          }
        }
        if (($arg->{ValType} eq 'boolean') && 
            (($args{$perlName} eq 'undef') || ($args{$perlName}) eq ''))  {
          $args{$perlName} = undef;
        }
        last;
      }
    }
  }

}



##############################################################################
## LearnArgsFromConfFile - This will open the appropriate .conf file to get
##                       additional arguments
##
##############################################################################
sub LearnArgsFromConfFile {
  my $homeDir;
  if (exists $ENV{'HOME'}) {
    $homeDir = $ENV{'HOME'};
  } else {
    # Some flavour of Windows? Try this:
    $homeDir = $ENV{'USERPROFILE'};
  }
  return if !(-e "$homeDir");
  return if !(-e "$homeDir/.scripts");

  my $conf = "$homeDir/.scripts/rs-kernel-log.conf";
  return if !(-e $conf);

  # The file exists - suck it in and parse out the goodness
  open(IN, $conf) || return;
  my @data = <IN>;
  close(IN);

  my $section = "";
  my $quiet = 0;
  foreach my $line (@data) {
    if ($line =~ /^\s*\[([^\]]+)\]/) {
      $section = $1;
    }
    elsif ($section =~ /^(args)|(command-line-args)|(cmd-line-args)|(cmdline-args)/i || $section eq "") {
      if ($line =~ /^\s*([\w\-\_\d]+)\s*=\s*([^\n\s\#\;]+)/) {
        my $arg = $1;
        my $val = $2;
        print "Defaulting argument --$1 to $2 from .conf file\n" unless $quiet;
        # Put the arg at the head of the arg list
        unshift(@ARGV, "--$arg=$val");
      }
      elsif ($line =~ /^\s*([\w\-\_\d]+)\s*$/) {
        my $arg = $1;
        print "Defaulting flag --$1 to on from .conf file\n" unless $quiet;
        # Put the arg at the head of the arg list
        unshift(@ARGV, "--$arg");
      }
    }
    elsif ($section =~ /^global-?settings/i) {
      if ($line =~ /^\s*([\w\-\_\d]+)\s*=\s*([^\n\s\#\;]+)/) {
        my $arg = $1;
        my $val = $2;
        if (lc($arg) eq "quiet") {
          $quiet = $val;
          unshift(@ARGV, "--quiet") if $val;
        }
      }
    }
  }
  
} # LearnArgsFromConfFile


##############################################################################
## GetArgInfo - This will return all the script information in perl
##              struct form.
##
##############################################################################
sub GetArgInfo {

  my $cfgInfo = {
             'SuperScriptRevision' => '5118',
             'ShortDescription' => 'Sensible tail -f of kernel.log on a specified router',
             'ParsingType' => 'unordered',
             'Description' => 'This script will log into the specified router and do a tail -F on the kernel.log.  You can apply a regex filter (see arguments).
',
             'Name' => 'rs-kernel-log',
             'Args' => [
                         {
                           'Type' => 'positional',
                           'Required' => 1,
                           'ValType' => 'string',
                           'Name' => 'router',
                           'Description' => 'The router whose log should be viewed',
                           'PerlName' => 'router'
                         },
                         {
                           'Type' => 'named',
                           'Default' => '100000',
                           'Required' => 0,
                           'ValType' => 'integer',
                           'Description' => 'Specifies the number of lines of history to keep before it is overwritten',
                           'Name' => 'lines',
                           'PerlName' => 'lines'
                         },
                         {
                           'Type' => 'positional',
                           'Default' => '',
                           'Required' => 0,
                           'ValType' => 'string',
                           'Name' => 'filter',
                           'Description' => 'Regexp applied to all logs - only matching ones are displayed',
                           'PerlName' => 'filter'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Turn on all debug output.',
                           'Name' => 'debug',
                           'PerlName' => 'debug'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Prints out completion info for the parameters',
                           'Name' => 'gen-completion',
                           'PerlName' => 'gen_completion'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Print out usage info for this script',
                           'Name' => 'help',
                           'PerlName' => 'help'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Query the user for values for each of the arguments, providing help for each.  This will print out the appropriate command line for future reference before executing the script.',
                           'Name' => 'interactive',
                           'PerlName' => 'interactive'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Reduce the amount of output to the bare minimum.',
                           'Name' => 'quiet',
                           'PerlName' => 'quiet'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Print out usage summary for this script',
                           'Name' => 'short-help',
                           'PerlName' => 'short_help'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Print out one line description for this script',
                           'Name' => 'tiny-help',
                           'PerlName' => 'tiny_help'
                         },
                         {
                           'AllowNo' => 0,
                           'Type' => 'named',
                           'Required' => 0,
                           'ValType' => 'boolean',
                           'Description' => 'Print out more user-level output',
                           'Name' => 'verbose',
                           'PerlName' => 'verbose'
                         }
                       ],
             'PositionalListIdx' => undef
           };

  return $cfgInfo;

} # GetArgInfo


##############################################################################
## DisplayCommandLine - This will print out the command line for the
##                      current arguments
##
##############################################################################
sub DisplayCommandLine {

  my $argInfo = GetArgInfo();

  # my $output = "$argInfo->{Name} ";
  my $output = "$0 ";
  my $positional = '';

  foreach my $arg (@{$argInfo->{Args}}) {
    my $name = $arg->{Name};
    my $perlName = $arg->{PerlName};
    if (not defined $args{$perlName}) {
      next;
    }
    if (defined $arg->{Default} && 
        $args{$perlName} eq $arg->{Default}) {
      next;
    }
    if ($perlName eq 'interactive') {
      next;
    }

    my $value = $args{$perlName};
    if ($value =~ /\s/) {
      $value = "'$value'";
    }
    
    if ($arg->{Type} eq 'named') {
      if ($arg->{ValType} eq 'boolean') {
        if (defined $args{$perlName}) {
          if ($args{$perlName} == 0) {
            $output .= "--no-$name ";
          }
          else {
            $output .= "--$name ";
          }
        }
      }
      else {
        $output .= "--$name=$value ";
      }
    }
    else {
      if (ref $value eq 'ARRAY') {
        if (scalar(@{$value} > 1) || $value->[0] ne '') {
          $positional .= "@{$value} ";
        }
      }
      else {
        $positional .= "$value ";
      }
    }

  }
  
  print "Command line:\n";
  print "$output$positional\n\n";
  # `history -s $output$positional`;

} # DisplayCommandLine #


##############################################################################
## Log - This will output messages of various levels
##
##############################################################################
sub Log {
  my ($level, $message, $addCaller, $opts) = @_;

  my $outputMsg = 0;
  if (!$args{quiet}) {
    if ($level eq "DEBUG") {
      if ($args{debug}) {
        $outputMsg = 1;
      }
    }
    elsif ($level eq "INFO") {
      if ($args{debug} || $args{verbose}) {
        $outputMsg = 1;
      }
    }
    elsif ($level eq "WARN") {
        $outputMsg = 1;
    }
  }

  if (($level eq "ERROR") || ($level eq "FATAL") || ($level eq "MSG")) {
    $outputMsg = 1;
  }
  
  if ($outputMsg) {
    if (($level ne "MSG") || $addCaller) {
      print "$level: ";
    }
    if ($addCaller) {
      my @caller = caller(1);
      $caller[1] =~ s/^.*\///;
      print "$caller[1]:$caller[2]: ";
    }
    print "$message\n";
  }

  if ($level eq "FATAL") {
    exit 1;

  }

} # Log

sub Fatal { Log("FATAL", @_) };
sub Error { Log("ERROR", @_) };
sub Warn  { Log("WARN", @_) };
sub Info  { Log("INFO", @_) };
sub Debug { Log("DEBUG", @_) };
sub Msg   { Log("MSG", @_) };



##############################################################################
## StrToNum - This will convert all types of strings into numbers
##
##############################################################################
sub StrToNum {
  my ($string, $failMsg) = @_;

  if ($string !~ 
      /^([-+]?_*[1-9][0-9_]*  |
         0x_*[0-9a-f][0-9a-f_]* |
         0b_*[01][01_]*         |
         0[0-7_]*)$
      /xi) {
    Fatal($failMsg);
  }

  ($string) = ($string =~ /(.*)/);
  my $num = eval($string);
  
  if ($@) {
    Fatal($@);
  }

  return $num;

}
  


 

__END__

=head1 NAME

rs-kernel-log

=head1 DESCRIPTION

This script will log into the specified router and do a tail -F on the kernel.log.  You can apply a regex filter (see arguments).


=head1 OPTIONS

rs-kernel-log [OPTIONS] <router> [filter] 

Where:

=over

=item router (string) B<*Required*>

The router whose log should be viewed

=item filter (string)

Regexp applied to all logs - only matching ones are displayed

=item --lines=<integer>

Specifies the number of lines of history to keep before it is overwritten
[Default: 100000]

=item --interactive

Query the user for values for each of the arguments, providing help for each.  This will print out the appropriate command line for future reference before executing the script.

=item --help, --short-help, --tiny-help

Display various levels of usage information

=item --quiet, --verbose, --debug

Control the amount of information printed during execution

=back

